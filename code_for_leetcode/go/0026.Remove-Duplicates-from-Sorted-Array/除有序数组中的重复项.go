package leetcode

func removeDuplicates(nums []int) int {
	// 数组是排过序的，重复的元素一定相邻
	// 前指针 j，后指针 i；开始时：i=j+1，所以如果没有重复项，nums[++j] == nums[i]
	// 如果相等，i 后移一位；若不等，i 的元素复制到 j+1 的位置，i，j 各后移一位。
	// 新数组长度是 j+1

	// 举例：原数组为 [1, 1, 2, 2, 3, 4, 4, 5]，
	//在遍历过程中，当遇到第一个 2 时，会将 2 复制到 j+1 的位置，得到 [1, 2, ...]。
	//接着，当遇到第一个 3 时，将 3 复制到 j+1 的位置，得到 [1, 2, 3, ...]。
	//以此类推，最终得到去重后的新数组 [1, 2, 3, 4, 5, ...]。
	//这个过程不需要额外的数组，而是在原数组上进行修改，实现了原地去重。

	// 初始化前指针 j
	j := 0

	// 遍历数组，i 从第二个元素开始
	for i := 1; i < len(nums); i++ {
		// 如果当前元素不等于前一个元素（不重复）
		if nums[i] != nums[j] {
			// 前指针 j 后移一位
			j++
			// 将不重复的元素复制到 j+1 的位置
			// 目的保证j始终指向去重后的新数组的末尾
			nums[j] = nums[i]
		}
	}

	// 返回新数组的长度，即 j+1
	return j + 1
}
